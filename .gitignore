init_mem = {}  # Empty memory at the very beginning
a = {800: 123}  # 1st data with address 800 and value 123
b = {900: 1000}  # 2nd data with address 900 and value 1000

def store(storage, elm):
    storage.update(elm)
    return storage

mem = store(init_mem, a)  # mem = {800: 123}
print("mem =", mem)
mem = store(mem, b)  # mem = {800: 123, 900: 1000}
print("mem =", mem)

c = {800: 900}
mem = store(mem, c)  # mem = {800: 900, 900: 1000}
print("mem =", mem)

d = {1500: 700}
mem = store(mem, d)  # mem = {800: 900, 900: 1000, 1500: 700}
print("mem =", mem)

def imm_load_ac(val):  # Load accumulator(ac) by immediate addressing
    return val

ac = imm_load_ac(800)  # ac = 800
print("ac =", ac)

def dir_load_ac(storage, val):  # Load accumulator(ac) by direct addressing
    return storage.get(val, None)

ac = dir_load_ac(mem, 800)  # ac = 900
print("ac =", ac)

def indir_load_ac(storage, val):  # Load accumulator(ac) by indirect addressing
    indirect_address = storage.get(val, None)
    if indirect_address is not None:
        return storage.get(indirect_address, None)
    return None

ac = indir_load_ac(mem, 800)  # ac = 1000
print("ac =", ac)


def idx_load_ac(storage, idx, val):
    idx_address = storage.get(val, 700) + idx
    return storage.get(idx_address,700)

idxreg = 700
ac = idx_load_ac(mem, idxreg, 800)  # ac = 700
print("ac =", ac)
